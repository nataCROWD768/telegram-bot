const TelegramBot       = require('node-telegram-bot-api');
const express           = require('express');
const mongoose          = require('mongoose');
const axios             = require('axios');
const path              = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const {
    handleAdmin,
    showStats,
    showProducts,
    addProduct,
    editProduct,
    deleteProduct,
    moderateReviews,
    handleAdminCallback
} = require('./handlers/adminHandler');
const {
    handleCallback,
    searchProducts
} = require('./handlers/productHandler');
const { showProfile, showOrderHistory } = require('./handlers/profileHandler');
const Visit             = require('./models/visit');
const Product           = require('./models/product');
const Order             = require('./models/order');
const Review            = require('./models/review');
const initialProducts   = require('./data/products');
require('dotenv').config();

const app               = express();
const isLocal           = process.env.NODE_ENV !== 'production';
const bot               = new TelegramBot(token, { polling: isLocal });

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'), {
    setHeaders: (res, filePath) => {
        console.log(`–†–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
    }
}));

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MongoDB
const mongoUri          = process.env.MONGODB_URI;
if (!mongoUri || (!mongoUri.startsWith('mongodb://') && !mongoUri.startsWith('mongodb+srv://'))) {
    console.error('–û—à–∏–±–∫–∞: MONGODB_URI –Ω–µ –∑–∞–¥–∞–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');
    process.exit(1);
}
mongoose.connect(mongoUri).then(() => {
    console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Webhook —á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å—ã
const setupWebhook      = async () => {
    if (isLocal) {
        console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling');
        return;
    }

    const appName       = process.env.RENDER_APP_NAME;
    if (!appName) {
        console.error('–û—à–∏–±–∫–∞: RENDER_APP_NAME –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        process.exit(1);
    }

    const WEBHOOK_URL   = `https://${appName}.onrender.com/bot${token}`;
    const telegramApi   = `https://api.telegram.org/bot${token}`;

    try {
        console.log('–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ webhook...');
        const deleteResponse = await axios.get(`${telegramApi}/deleteWebhook`);
        console.log('–û—Ç–≤–µ—Ç –æ—Ç deleteWebhook:', JSON.stringify(deleteResponse.data));

        console.log(`–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook –Ω–∞ ${WEBHOOK_URL}...`);
        const setResponse = await axios.get(`${telegramApi}/setWebHook?url=${WEBHOOK_URL}`);
        console.log('–û—Ç–≤–µ—Ç –æ—Ç setWebHook:', JSON.stringify(setResponse.data));

        if (setResponse.data.ok) {
            console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook:', setResponse.data.description);
            process.exit(1);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:', error.message);
        if (error.response) {
            console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error.response.data));
        }
        process.exit(1);
    }
};

// –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ data/products.js —Å MongoDB
const syncProducts = async () => {
    try {
        const existingProducts = await Product.find();
        const existingNames    = existingProducts.map(p => p.name);

        for (const productData of initialProducts) {
            if (!existingNames.includes(productData.name)) {
                await Product.create(productData);
            } else {
                await Product.updateOne({ name: productData.name }, productData);
            }
        }
        console.log('–¢–æ–≤–∞—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —Å data/products.js');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
    }
};

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å –æ—Ç–∑—ã–≤–∞–º–∏
app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find();
        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            return { ...product.toObject(), reviews };
        }));
        res.json({ products: productsWithReviews, total: products.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API /api/products:', error.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—Ç–∞
bot.onText(/\/start/, async (msg) => {
    const chatId        = msg.chat.id;
    const username      = msg.from.username || msg.from.first_name;

    console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç ${username} (chatId: ${chatId})`);
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
            await bot.sendVideoNote(chatId, welcomeVideo);
            await bot.sendMessage(chatId, `
                ‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç! ‚ú®
                
                ${companyInfo}
                
                –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:
            `, { parse_mode: 'Markdown' });
        } else {
            await bot.sendMessage(chatId, `
                üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!
                
                –í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:
            `, { parse_mode: 'Markdown' });
        }

        handleMainMenu(bot, chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ /start:', error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
bot.on('message', async (msg) => {
    const chatId        = msg.chat.id;
    const webAppUrl     = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME}.onrender.com`;
    console.log(`–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}" –æ—Ç ${msg.from.username}`);

    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            showProfile(bot, chatId);
            break;

        case '–í–∏—Ç—Ä–∏–Ω–∞':
            await bot.sendMessage(chatId, 'üõí –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã...', {
                reply_markup: {
                    inline_keyboard: [[
                        { text: '–û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É', web_app: { url: `${webAppUrl}/index.html` } }
                    ]]
                }
            });
            break;

        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
            break;

        case '–û—Ç–∑—ã–≤—ã':
            bot.sendMessage(chatId, 'üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—á–∫—É —Ç–æ–≤–∞—Ä–∞');
            break;

        case '/admin':
            handleAdmin(bot, msg);
            break;

        case '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤':
            showOrderHistory(bot, chatId);
            break;

        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            handleMainMenu(bot, chatId);
            break;

        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            showStats(bot, chatId);
            break;

        case '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':
            showProducts(bot, chatId);
            break;

        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            addProduct(bot, chatId);
            break;

        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            editProduct(bot, chatId);
            break;

        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            deleteProduct(bot, chatId);
            break;

        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            moderateReviews(bot, chatId);
            break;
    }

    if (msg.text?.startsWith('/search')) {
        const query     = msg.text.split(' ').slice(1).join(' ');
        searchProducts(bot, chatId, query);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', (callbackQuery) => {
    console.log(`–ü–æ–ª—É—á–µ–Ω callback: ${callbackQuery.data}`);
    handleCallback(bot, callbackQuery);
    handleAdminCallback(bot, callbackQuery);
});

// Webhook endpoint —Å –æ—Ç–ª–∞–¥–∫–æ–π
app.post(`/bot${token}`, (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook:', JSON.stringify(req.body, null, 2));
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App
bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    const data = JSON.parse(msg.web_app_data.data);
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:', data);

    if (data.type === 'order') {
        const { productId, quantity } = data;
        const product = await Product.findById(productId);

        if (!product || quantity <= 0) {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞');
            return;
        }

        const order = await Order.create({
            userId: chatId,
            username: msg.from.username,
            productId,
            quantity,
            totalPrice: quantity * product.clubPrice
        });

        product.stock -= quantity;
        await product.save();

        await bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–æ–≤–∞—Ä: ${product.name}, –°—É–º–º–∞: ${order.totalPrice} —Ä—É–±.`);
    }

    if (data.type === 'review') {
        const { productId, rating, comment } = data;
        if (!rating || rating < 1 || rating > 5 || !comment) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞');
            return;
        }

        await Review.create({
            userId: chatId,
            username: msg.from.username,
            productId,
            rating,
            comment
        });

        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const startServer = async () => {
    await setupWebhook();
    await syncProducts();

    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
};

startServer();