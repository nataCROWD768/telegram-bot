const TelegramBot       = require('node-telegram-bot-api');
const express           = require('express');
const mongoose          = require('mongoose');
const axios             = require('axios');
const path              = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const {
    handleAdmin,
    showStats,
    showProducts,
    addProduct,
    editProduct,
    deleteProduct,
    moderateReviews,
    handleAdminCallback
} = require('./handlers/adminHandler');
const {
    handleCallback,
    searchProducts
} = require('./handlers/productHandler');
const { showProfile, showOrderHistory } = require('./handlers/profileHandler');
const Visit             = require('./models/visit');
const Product           = require('./models/product');
const Order             = require('./models/order');
const Review            = require('./models/review');
const initialProducts   = require('./data/products');
require('dotenv').config();

const app               = express();
const isLocal           = process.env.NODE_ENV !== 'production';
const bot               = new TelegramBot(token, { polling: isLocal });

// ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID)
const ADMIN_ID = process.env.ADMIN_ID || 'YOUR_ADMIN_ID_HERE';

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'), {
    setHeaders: (res, filePath) => {
        console.log(`–†–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–∞: ${filePath}`);
    }
}));

mongoose.connect(process.env.MONGODB_URI).then(() => {
    console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω');
}).catch(err => {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
    process.exit(1);
});

const setupWebhook = async () => {
    if (isLocal) return console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: polling');
    const appName = process.env.RENDER_APP_NAME;
    const WEBHOOK_URL = `https://${appName}.onrender.com/bot${token}`;
    const telegramApi = `https://api.telegram.org/bot${token}`;

    try {
        await axios.get(`${telegramApi}/deleteWebhook`);
        const setResponse = await axios.get(`${telegramApi}/setWebHook?url=${WEBHOOK_URL}`);
        console.log(setResponse.data.ok ? `Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}` : '–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ webhook:', error.message);
        process.exit(1);
    }
};

const syncProducts = async () => {
    try {
        const existingProducts = await Product.find();
        const existingNames = existingProducts.map(p => p.name);
        for (const productData of initialProducts) {
            if (!existingNames.includes(productData.name)) {
                await Product.create(productData);
            } else {
                await Product.updateOne({ name: productData.name }, productData);
            }
        }
        console.log('–¢–æ–≤–∞—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
    }
};

app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find();
        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            return { ...product.toObject(), reviews };
        }));
        res.json({ products: productsWithReviews, total: products.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API /api/products:', error.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || msg.from.first_name;
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
            await bot.sendVideoNote(chatId, welcomeVideo);
            await bot.sendMessage(chatId, `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n${companyInfo}\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:`, { parse_mode: 'Markdown' });
        } else {
            await bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:`, { parse_mode: 'Markdown' });
        }
        handleMainMenu(bot, chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ /start:', error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞');
    }
});

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const webAppUrl = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME}.onrender.com`;
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}" –æ—Ç ${msg.from.username}`);

    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            showProfile(bot, chatId);
            break;
        case '–í–∏—Ç—Ä–∏–Ω–∞':
            await bot.sendMessage(chatId, 'üõí –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã...', {
                reply_markup: { inline_keyboard: [[{ text: '–û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É', web_app: { url: `${webAppUrl}/index.html` } }]] }
            });
            break;
        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
            break;
        case '–û—Ç–∑—ã–≤—ã':
            const reviews = await Review.find().populate('productId', 'name');
            if (reviews.length === 0) {
                await bot.sendMessage(chatId, 'üìù –û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
            } else {
                const reviewList = reviews.map(r =>
                    `–¢–æ–≤–∞—Ä: ${r.productId.name}\n` +
                    `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username}\n` +
                    `–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n` +
                    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}\n` +
                    `–°—Ç–∞—Ç—É—Å: ${r.isApproved ? '–£—Ç–≤–µ—Ä–∂–¥—ë–Ω' : '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'}\n`
                ).join('\n---\n');
                await bot.sendMessage(chatId, `üìù –í—Å–µ –æ—Ç–∑—ã–≤—ã:\n\n${reviewList}`, { parse_mode: 'Markdown' });
            }
            break;
        case '/admin':
            if (chatId.toString() !== ADMIN_ID) {
                await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                return;
            }
            handleAdmin(bot, msg);
            break;
        case '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤':
            showOrderHistory(bot, chatId);
            break;
        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            handleMainMenu(bot, chatId);
            break;
        case '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            showStats(bot, chatId);
            break;
        case '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':
            showProducts(bot, chatId);
            break;
        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            addProduct(bot, chatId);
            break;
        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            editProduct(bot, chatId);
            break;
        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            deleteProduct(bot, chatId);
            break;
        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            if (chatId.toString() !== ADMIN_ID) return;
            await moderateReviews(bot, chatId);
            break;
    }

    if (msg.text?.startsWith('/search')) {
        const query = msg.text.split(' ').slice(1).join(' ');
        searchProducts(bot, chatId, query);
    }
});

bot.on('callback_query', (callbackQuery) => {
    console.log(`Callback: ${callbackQuery.data}`);
    handleCallback(bot, callbackQuery);
    handleAdminCallback(bot, callbackQuery);
});

app.post(`/bot${token}`, (req, res) => {
    console.log('Webhook:', JSON.stringify(req.body, null, 2));
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    const data = JSON.parse(msg.web_app_data.data);
    console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç Web App:', data);

    if (data.type === 'order') {
        const { productId, quantity } = data;
        const product = await Product.findById(productId);
        if (!product || quantity <= 0) {
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–∞');
            return;
        }
        const order = await Order.create({
            userId: chatId,
            username: msg.from.username,
            productId,
            quantity,
            totalPrice: quantity * product.clubPrice
        });
        product.stock -= quantity;
        await product.save();
        await bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –¢–æ–≤–∞—Ä: ${product.name}, –°—É–º–º–∞: ${order.totalPrice} —Ä—É–±.`);
    }

    if (data.type === 'review') {
        const { productId, rating, comment } = data;
        console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤:', { productId, rating, comment });
        if (!rating || rating < 1 || rating > 5 || !comment) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞');
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞');
            return;
        }
        try {
            const review = await Review.create({
                userId: chatId,
                username: msg.from.username || '–ê–Ω–æ–Ω–∏–º',
                productId,
                rating,
                comment,
                isApproved: false
            });
            console.log('–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', review);
            await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error.message);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
        }
    }
});

const startServer = async () => {
    await setupWebhook();
    await syncProducts();
    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
};

startServer();