require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const path = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const { handleAdmin, showProducts, addProduct, editProduct, deleteProduct, moderateReviews, handleAdminCallback } = require('./handlers/adminHandler');
const { handleCallback, searchProducts } = require('./handlers/productHandler');
const { showProfile } = require('./handlers/profileHandler');
const Visit = require('./models/visit');
const Product = require('./models/product');
const Review = require('./models/review');
const { formatDate } = require('./utils');

const app = express();
const isLocal = process.env.NODE_ENV !== 'production';
const BOT_TOKEN = process.env.BOT_TOKEN || '7998254262:AAEPpbNdFxiTttY4aLrkdNVzlksBIf6lwd8';
const bot = new TelegramBot(BOT_TOKEN, { polling: isLocal });
const ADMIN_ID = process.env.ADMIN_ID || '942851377';

bot.lastMessageId = {};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown-—Å–∏–º–≤–æ–ª–æ–≤
function escapeMarkdown(text) {
    if (!text) return text;
    return text.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
}

bot.deleteMyCommands()
    .then(() => console.log('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã, –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é" —Å–∫—Ä—ã—Ç–∞'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', err));

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ'))
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
        process.exit(1);
    });

const setupWebhook = async () => {
    if (isLocal) {
        console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling');
        return;
    }
    const appName = process.env.RENDER_APP_NAME || 'telegram-bot-gmut';
    const WEBHOOK_URL = `https://${appName}.onrender.com/bot${BOT_TOKEN}`;
    const telegramApi = `https://api.telegram.org/bot${BOT_TOKEN}`;

    try {
        const deleteResponse = await axios.get(`${telegramApi}/deleteWebhook`);
        console.log('–°—Ç–∞—Ä—ã–π Webhook —É–¥–∞–ª—ë–Ω:', deleteResponse.data);

        const allowedUpdates = ["message", "callback_query"];
        const url = `${telegramApi}/setWebhook?url=${encodeURIComponent(WEBHOOK_URL)}&allowed_updates=${encodeURIComponent(JSON.stringify(allowedUpdates))}`;
        const setResponse = await axios.get(url);
        if (!setResponse.data.ok) throw new Error('Webhook setup failed: ' + setResponse.data.description);
        console.log('Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω:', WEBHOOK_URL, '—Å allowed_updates:', allowedUpdates);

        const webhookInfo = await axios.get(`${telegramApi}/getWebhookInfo`);
        console.log('–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Webhook:', webhookInfo.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook:', error.response ? error.response.data : error.message);
        process.exit(1);
    }
};

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è —à–∞—Ä–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
app.post('/api/share-product', async (req, res) => {
    const { chatId, productId, name, clubPrice, clientPrice, description, image } = req.body;

    if (!chatId || !productId) {
        return res.status(400).json({ error: 'chatId –∏ productId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    try {
        const product = await Product.findById(productId);
        if (!product) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');

        const botUsername = 'nataCROWD768_bot';
        const escapedName = escapeMarkdown(name);
        const escapedDescription = escapeMarkdown(description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        const caption = `
üåü *${escapedName.toUpperCase()}* üåü  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
üíé *–ö–ª—É–±–Ω–∞—è —Ü–µ–Ω–∞:* __${clubPrice.toLocaleString()} ‚ÇΩ__  
üí∞ *–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ü–µ–Ω–∞:* __${clientPrice.toLocaleString()} ‚ÇΩ__  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
üìñ *–û –ø—Ä–æ–¥—É–∫—Ç–µ:*  
${escapedDescription}  
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ  
‚ú® [¬© Radar GP Assistant](https://t.me/${botUsername}) ‚ú®
        `.trim();

        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–π caption:', caption);
        console.log('–î–ª–∏–Ω–∞ caption (—Å–∏–º–≤–æ–ª—ã):', caption.length);
        console.log('–î–ª–∏–Ω–∞ caption (–±–∞–π—Ç—ã):', Buffer.from(caption).length);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        if (caption.length > 1024) {
            throw new Error('Caption –ø—Ä–µ–≤—ã—à–∞–µ—Ç 1024 —Å–∏–º–≤–æ–ª–∞');
        }

        await bot.sendPhoto(chatId, image, {
            caption,
            parse_mode: 'Markdown',
            reply_markup: mainMenuKeyboard
        });

        res.json({ success: true });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
        console.error('–ü–æ–ª–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞' });
    }
});

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ Webhook:', req.body);
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

const mainMenuKeyboard = {
    keyboard: [['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', '–í–∏—Ç—Ä–∏–Ω–∞'], ['–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç', '–û—Ç–∑—ã–≤—ã']],
    resize_keyboard: true,
    one_time_keyboard: false,
    persistent: true
};

async function ensureMainMenu(chatId) {
    const menuMsg = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
    bot.lastMessageId[chatId] = menuMsg.message_id;
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || msg.from.first_name;
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
        }

        await bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!`, { parse_mode: 'Markdown' });
        const menuMsg = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
        bot.lastMessageId[chatId] = menuMsg.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ /start:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞', { reply_markup: mainMenuKeyboard });
    }
});

const webAppUrl = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME || 'telegram-bot-gmut'}.onrender.com`;

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (bot.lastMessageId[chatId] && bot.lastMessageId[chatId] !== msg.message_id) {
        try {
            await bot.deleteMessage(chatId, bot.lastMessageId[chatId]);
        } catch (error) {
            if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 400) delete bot.lastMessageId[chatId];
        }
    }

    if (msg.text === '/start') return;

    let newMessage;
    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            await showProfile(bot, chatId);
            await ensureMainMenu(chatId);
            break;
        case '–í–∏—Ç—Ä–∏–Ω–∞':
            newMessage = await bot.sendMessage(chatId, '‚úÖ –í –Ω–æ–≤–æ–π –ú–û–î–ï–õ–ò –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´ (–∫–ª—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)\n–≤ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç:\n\n- –ø—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏\n- –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É:', web_app: { url: `${webAppUrl}/index.html` } }]]
                }
            });
            bot.lastMessageId[chatId] = newMessage.message_id;
            await ensureMainMenu(chatId);
            break;
        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            newMessage = await bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            await ensureMainMenu(chatId);
            break;
        case '–û—Ç–∑—ã–≤—ã':
            await showReviews(bot, chatId);
            await ensureMainMenu(chatId);
            break;
        case '/admin':
            if (chatId.toString() !== ADMIN_ID) {
                newMessage = await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { reply_markup: mainMenuKeyboard });
                bot.lastMessageId[chatId] = newMessage.message_id;
                await ensureMainMenu(chatId);
                return;
            }
            await handleAdmin(bot, msg);
            break;
        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            await handleMainMenu(bot, chatId);
            break;
        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            if (chatId.toString() !== ADMIN_ID) return;
            await moderateReviews(bot, chatId);
            break;
        case '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
            if (chatId.toString() !== ADMIN_ID) return;
            await showProducts(bot, chatId);
            break;
        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await addProduct(bot, chatId);
            break;
        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await editProduct(bot, chatId);
            break;
        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await deleteProduct(bot, chatId);
            break;
        default:
            newMessage = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            break;
    }
});

async function showReviews(bot, chatId, page = 1) {
    const reviewsPerPage = 10;
    try {
        const reviews = await Review.find({ isApproved: true }).populate('productId', 'name').sort({ createdAt: -1 });
        if (!reviews.length) {
            const newMessage = await bot.sendMessage(chatId, 'üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            return;
        }

        const totalPages = Math.ceil(reviews.length / reviewsPerPage);
        const start = (page - 1) * reviewsPerPage;
        const end = Math.min(start + reviewsPerPage, reviews.length);
        const paginatedReviews = reviews.slice(start, end);

        const reviewList = paginatedReviews.map(r => {
            const productName = r.productId ? r.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            return `–î–∞—Ç–∞: ${formatDate(r.createdAt)}\n–¢–æ–≤–∞—Ä: ${productName}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username.startsWith('@') ? r.username : '@' + r.username}\n–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}`;
        }).join('\n---\n');

        const inlineKeyboard = totalPages > 1 ? [[
            ...(page > 1 ? [{ text: '‚¨ÖÔ∏è', callback_data: `reviews_page_${page - 1}` }] : []),
            { text: `${page}/${totalPages}`, callback_data: 'noop' },
            ...(page < totalPages ? [{ text: '‚û°Ô∏è', callback_data: `reviews_page_${page + 1}` }] : [])
        ]] : [];

        const newMessage = await bot.sendMessage(chatId, `üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (${start + 1}-${end} –∏–∑ ${reviews.length}):\n\n${reviewList}`, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: inlineKeyboard }
        });
        bot.lastMessageId[chatId] = newMessage.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
        const newMessage = await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤', { reply_markup: mainMenuKeyboard });
        bot.lastMessageId[chatId] = newMessage.message_id;
    }
}

bot.onText(/\/reviews (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const page = parseInt(match[1]);
    await showReviews(bot, chatId, page);
    await ensureMainMenu(chatId);
});

bot.onText(/\/search (.+)/, async (msg, match) => searchProducts(bot, msg.chat.id, match[1]));

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data.startsWith('reviews_page_')) {
        const page = parseInt(data.split('_')[2]);
        await showReviews(bot, chatId, page);
        await ensureMainMenu(chatId);
        bot.answerCallbackQuery(callbackQuery.id);
    } else if (data === 'noop') {
        bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('approve_review_') || data.startsWith('reject_review_')) {
        await handleAdminCallback(bot, callbackQuery);
        await bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.', { reply_markup: mainMenuKeyboard });
        await ensureMainMenu(chatId);
    } else {
        await handleCallback(bot, callbackQuery);
    }
});

app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find();
        if (!products.length) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });

        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            const averageRating = reviews.length ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length : product.averageRating || 0;
            return { ...product.toObject(), reviews, averageRating };
        }));

        res.json({ products: productsWithReviews, total: products.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

app.get('/api/image/:fileId', async (req, res) => {
    try {
        const fileId = req.params.fileId;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
        const response = await axios.get(fileUrl, { responseType: 'stream' });
        res.set('Content-Type', response.headers['content-type'] || 'image/jpeg');
        res.set('Content-Disposition', 'inline');
        res.set('Cache-Control', 'public, max-age=86400');
        response.data.pipe(res);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' });
    }
});

const startServer = async () => {
    await setupWebhook();
    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
};

startServer();