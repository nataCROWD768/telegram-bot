require('dotenv').config();
const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const path = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const { handleAdmin, showProducts, addProduct, editProduct, deleteProduct, moderateReviews, handleAdminCallback } = require('./handlers/adminHandler');
const { handleCallback, searchProducts } = require('./handlers/productHandler');
const { showProfile } = require('./handlers/profileHandler');
const Visit = require('./models/visit');
const Product = require('./models/product'); // –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –∏–∑ models/product.js
const Review = require('./models/review');
const { formatDate } = require('./utils');

const app = express();
const isLocal = process.env.NODE_ENV !== 'production';
const BOT_TOKEN = process.env.BOT_TOKEN || '7998254262:AAEPpbNdFxiTttY4aLrkdNVzlksBIf6lwd8';
const bot = new TelegramBot(BOT_TOKEN, { polling: isLocal });
const ADMIN_ID = process.env.ADMIN_ID || '942851377';

bot.lastMessageId = {};

bot.deleteMyCommands()
    .then(() => console.log('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É–¥–∞–ª–µ–Ω—ã, –∫–Ω–æ–ø–∫–∞ "–ú–µ–Ω—é" —Å–∫—Ä—ã—Ç–∞'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥:', err));

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public')));

mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ'))
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
        process.exit(1);
    });

const setupWebhook = async () => {
    if (isLocal) return;
    const appName = process.env.RENDER_APP_NAME || 'telegram-bot-gmut';
    const WEBHOOK_URL = `https://${appName}.onrender.com/bot${BOT_TOKEN}`;
    const telegramApi = `https://api.telegram.org/bot${BOT_TOKEN}`;

    try {
        await axios.get(`${telegramApi}/deleteWebhook`);
        const setResponse = await axios.get(`${telegramApi}/setWebhook?url=${WEBHOOK_URL}&allowed_updates=["message","callback_query","web_app_data"]`);
        if (!setResponse.data.ok) throw new Error('Webhook setup failed');
        console.log('Webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook:', error);
        process.exit(1);
    }
};

app.get('/api/products', async (req, res) => {
    try {
        const products = await Product.find();
        if (!products.length) return res.status(404).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });

        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            const averageRating = reviews.length ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length : product.averageRating || 0;
            return { ...product.toObject(), reviews, averageRating };
        }));

        res.json({ products: productsWithReviews, total: products.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

app.get('/api/image/:fileId', async (req, res) => {
    try {
        const fileId = req.params.fileId;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
        const response = await axios.get(fileUrl, { responseType: 'stream' });
        res.set('Content-Type', response.headers['content-type'] || 'image/jpeg');
        res.set('Content-Disposition', 'inline');
        res.set('Cache-Control', 'public, max-age=86400');
        response.data.pipe(res);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' });
    }
});

app.get('/api/reviews', async (req, res) => {
    try {
        const reviews = await Review.find({ isApproved: true }).populate('productId', 'name');
        const formattedReviews = reviews.map(review => ({
            ...review.toObject(),
            productName: review.productId ? review.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
        }));
        res.json({ reviews: formattedReviews, total: formattedReviews.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤' });
    }
});

app.post('/api/reviews', async (req, res) => {
    try {
        const { productId, username, rating, comment, isApproved } = req.body;
        if (!mongoose.Types.ObjectId.isValid(productId)) return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π productId' });

        const review = new Review({ userId: 'web_user_' + Date.now(), username: username || '–ê–Ω–æ–Ω–∏–º', productId, rating, comment, isApproved: isApproved || false });
        await review.save();

        const product = await Product.findById(productId);
        const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username || '–ê–Ω–æ–Ω–∏–º'}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
        await bot.sendMessage(ADMIN_ID, message, {
            reply_markup: { inline_keyboard: [[{ text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` }, { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }]] }
        });

        res.json({ success: true, review });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞' });
    }
});

const mainMenuKeyboard = {
    keyboard: [['–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', '–í–∏—Ç—Ä–∏–Ω–∞'], ['–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç', '–û—Ç–∑—ã–≤—ã']],
    resize_keyboard: true,
    one_time_keyboard: false,
    persistent: true
};

async function ensureMainMenu(chatId) {
    const menuMsg = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
    bot.lastMessageId[chatId] = menuMsg.message_id;
}

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || msg.from.first_name;
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
        }

        await bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!`, { parse_mode: 'Markdown' });
        const menuMsg = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
        bot.lastMessageId[chatId] = menuMsg.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ /start:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞', { reply_markup: mainMenuKeyboard });
    }
});

const webAppUrl = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME || 'telegram-bot-gmut'}.onrender.com`;

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    if (bot.lastMessageId[chatId] && bot.lastMessageId[chatId] !== msg.message_id) {
        try {
            await bot.deleteMessage(chatId, bot.lastMessageId[chatId]);
        } catch (error) {
            if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 400) delete bot.lastMessageId[chatId];
        }
    }

    if (msg.text === '/start') {
        return;
    }

    let newMessage;
    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            await showProfile(bot, chatId);
            await ensureMainMenu(chatId);
            break;
        case '–í–∏—Ç—Ä–∏–Ω–∞':
            newMessage = await bot.sendMessage(chatId, '‚úÖ –í –Ω–æ–≤–æ–π –ú–û–î–ï–õ–ò –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´ (–∫–ª—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)\n–≤ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç:\n\n- –ø—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏\n- –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É:', web_app: { url: `${webAppUrl}/index.html` } }]]
                }
            });
            bot.lastMessageId[chatId] = newMessage.message_id;
            await ensureMainMenu(chatId);
            break;
        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            newMessage = await bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            await ensureMainMenu(chatId);
            break;
        case '–û—Ç–∑—ã–≤—ã':
            await showReviews(bot, chatId);
            await ensureMainMenu(chatId);
            break;
        case '/admin':
            if (chatId.toString() !== ADMIN_ID) {
                newMessage = await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', { reply_markup: mainMenuKeyboard });
                bot.lastMessageId[chatId] = newMessage.message_id;
                await ensureMainMenu(chatId);
                return;
            }
            await handleAdmin(bot, msg);
            break;
        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            await handleMainMenu(bot, chatId);
            break;
        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            if (chatId.toString() !== ADMIN_ID) return;
            await moderateReviews(bot, chatId);
            break;
        case '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
            if (chatId.toString() !== ADMIN_ID) return;
            await showProducts(bot, chatId);
            break;
        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await addProduct(bot, chatId);
            break;
        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await editProduct(bot, chatId);
            break;
        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await deleteProduct(bot, chatId);
            break;
        default:
            newMessage = await bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            break;
    }
});

async function showReviews(bot, chatId, page = 1) {
    const reviewsPerPage = 10;
    try {
        const reviews = await Review.find({ isApproved: true }).populate('productId', 'name').sort({ createdAt: -1 });
        if (!reviews.length) {
            const newMessage = await bot.sendMessage(chatId, 'üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            return;
        }

        const totalPages = Math.ceil(reviews.length / reviewsPerPage);
        const start = (page - 1) * reviewsPerPage;
        const end = Math.min(start + reviewsPerPage, reviews.length);
        const paginatedReviews = reviews.slice(start, end);

        const reviewList = paginatedReviews.map(r => {
            const productName = r.productId ? r.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            return `–î–∞—Ç–∞: ${formatDate(r.createdAt)}\n–¢–æ–≤–∞—Ä: ${productName}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username.startsWith('@') ? r.username : '@' + r.username}\n–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}`;
        }).join('\n---\n');

        const inlineKeyboard = totalPages > 1 ? [[
            ...(page > 1 ? [{ text: '‚¨ÖÔ∏è', callback_data: `reviews_page_${page - 1}` }] : []),
            { text: `${page}/${totalPages}`, callback_data: 'noop' },
            ...(page < totalPages ? [{ text: '‚û°Ô∏è', callback_data: `reviews_page_${page + 1}` }] : [])
        ]] : [];

        const newMessage = await bot.sendMessage(chatId, `üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (${start + 1}-${end} –∏–∑ ${reviews.length}):\n\n${reviewList}`, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: inlineKeyboard }
        });
        bot.lastMessageId[chatId] = newMessage.message_id;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤:', error);
        const newMessage = await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤', { reply_markup: mainMenuKeyboard });
        bot.lastMessageId[chatId] = newMessage.message_id;
    }
}

bot.onText(/\/reviews (\d+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const page = parseInt(match[1]);
    await showReviews(bot, chatId, page);
    await ensureMainMenu(chatId);
});

bot.onText(/\/search (.+)/, async (msg, match) => searchProducts(bot, msg.chat.id, match[1]));

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data.startsWith('reviews_page_')) {
        const page = parseInt(data.split('_')[2]);
        await showReviews(bot, chatId, page);
        await ensureMainMenu(chatId);
        bot.answerCallbackQuery(callbackQuery.id);
    } else if (data === 'noop') {
        bot.answerCallbackQuery(callbackQuery.id);
    } else if (data.startsWith('approve_review_') || data.startsWith('reject_review_')) {
        await handleAdminCallback(bot, callbackQuery);
        await bot.sendMessage(chatId, '–î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.', { reply_markup: mainMenuKeyboard });
        await ensureMainMenu(chatId);
    } else {
        await handleCallback(bot, callbackQuery);
    }
});

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    let data;
    try {
        data = JSON.parse(msg.web_app_data.data);
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:', data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö', { reply_markup: mainMenuKeyboard });
        await ensureMainMenu(chatId);
        return;
    }

    if (data.type === 'share') {
        const { productId, name, clubPrice, clientPrice, description, image } = data;
        try {
            const product = await Product.findById(productId);
            if (!product) {
                console.error(`–ü—Ä–æ–¥—É–∫—Ç —Å ID ${productId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ products`);
                throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            }
            console.log('–ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑–µ:', product);

            const caption = `
‚ú® *${name}* ‚ú®
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üíé *–ö–ª—É–±–Ω–∞—è —Ü–µ–Ω–∞:* ${clubPrice.toLocaleString()} ‚ÇΩ
üí∞ *–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ü–µ–Ω–∞:* ${clientPrice.toLocaleString()} ‚ÇΩ
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* 
${description}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
            `.trim();

            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ —Å File ID:', image);
            const newMessage = await bot.sendPhoto(chatId, image, {
                caption,
                parse_mode: 'Markdown',
                reply_markup: mainMenuKeyboard
            });
            bot.lastMessageId[chatId] = newMessage.message_id;
            console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, message_id:', newMessage.message_id);
            await ensureMainMenu(chatId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
            await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ${error.message}`, { reply_markup: mainMenuKeyboard });
            await ensureMainMenu(chatId);
        }
    } else if (data.type === 'review') {
        const { productId, rating, comment } = data;
        if (!rating || rating < 1 || rating > 5 || !comment || !mongoose.Types.ObjectId.isValid(productId)) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞', { reply_markup: mainMenuKeyboard });
            await ensureMainMenu(chatId);
            return;
        }
        try {
            const product = await Product.findById(productId);
            if (!product) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
            const username = msg.from.username ? `@${msg.from.username}` : '–ê–Ω–æ–Ω–∏–º';
            const review = new Review({ userId: chatId.toString(), username, productId, rating, comment, isApproved: false });
            await review.save();

            const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            await bot.sendMessage(ADMIN_ID, message, {
                reply_markup: { inline_keyboard: [[{ text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` }, { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }]] }
            });

            const newMessage = await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.', { reply_markup: mainMenuKeyboard });
            bot.lastMessageId[chatId] = newMessage.message_id;
            await ensureMainMenu(chatId);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞:', error);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞', { reply_markup: mainMenuKeyboard });
            await ensureMainMenu(chatId);
        }
    }
});

const startServer = async () => {
    await setupWebhook();
    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
};

startServer();