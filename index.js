const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const path = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const {
    handleAdmin,
    showStats,
    showProducts,
    addProduct,
    editProduct,
    deleteProduct,
    moderateReviews,
    handleAdminCallback
} = require('./handlers/adminHandler');
const { handleCallback, searchProducts } = require('./handlers/productHandler');
const { showProfile } = require('./handlers/profileHandler');
const Visit = require('./models/visit');
const Product = require('./models/product');
const Review = require('./models/review');
const initialProducts = require('./data/products');
require('dotenv').config();

const app = express();
const isLocal = process.env.NODE_ENV !== 'production';
const BOT_TOKEN = process.env.TOKEN || '7998254262:AAEPpbNdFxiTttY4aLrkdNVzlksBIf6lwd8';
const bot = new TelegramBot(BOT_TOKEN, { polling: isLocal });
const ADMIN_ID = process.env.ADMIN_ID || '942851377';

let lastMessageId = {};

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'), {
    setHeaders: (res, filePath) => console.log(`–†–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–∞: ${filePath}`)
}));

mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω'))
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
        process.exit(1);
    });

const setupWebhook = async () => {
    if (isLocal) {
        console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: polling –∞–∫—Ç–∏–≤–µ–Ω');
        return;
    }
    const appName = process.env.RENDER_APP_NAME || 'telegram-bot-gmut';
    const WEBHOOK_URL = `https://${appName}.onrender.com/bot${BOT_TOKEN}`;
    const telegramApi = `https://api.telegram.org/bot${BOT_TOKEN}`;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook: ${WEBHOOK_URL}`);

    try {
        const deleteResponse = await axios.get(`${telegramApi}/deleteWebhook`);
        console.log('–°—Ç–∞—Ä—ã–π webhook —É–¥–∞–ª—ë–Ω:', deleteResponse.data);

        const setResponse = await axios.get(`${telegramApi}/setWebHook?url=${WEBHOOK_URL}`);
        if (setResponse.data.ok) {
            console.log(`Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${WEBHOOK_URL}`);
        } else {
            console.error('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', setResponse.data);
            process.exit(1);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook:', error.response ? error.response.data : error.message);
        process.exit(1);
    }
};

const syncProducts = async () => {
    try {
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤...');
        await Product.deleteMany({});
        console.log('–ö–æ–ª–ª–µ–∫—Ü–∏—è products –æ—á–∏—â–µ–Ω–∞');
        for (const productData of initialProducts) {
            const newProduct = await Product.create(productData);
            console.log('–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä:', newProduct);
        }
        console.log('–¢–æ–≤–∞—Ä—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error.message);
    }
};

app.get('/api/products', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/products');
    try {
        const products = await Product.find();
        console.log('–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:', products);
        if (!products || products.length === 0) {
            console.log('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return res.status(404).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
        }
        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            return { ...product.toObject(), reviews };
        }));
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', productsWithReviews);
        res.json({ products: productsWithReviews, total: products.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API /api/products:', error.message);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

app.post('/api/reviews', async (req, res) => {
    try {
        const { productId, username, rating, comment, isApproved } = req.body;
        const review = new Review({
            userId: 'web_user_' + Date.now(),
            username: username || '–ê–Ω–æ–Ω–∏–º',
            productId,
            rating,
            comment,
            isApproved: isApproved || false
        });
        await review.save();
        console.log('–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', review);

        const product = await Product.findById(productId);
        const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username || '–ê–Ω–æ–Ω–∏–º'}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
        await bot.sendMessage(ADMIN_ID, message, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` },
                        { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }
                    ]
                ]
            }
        });

        res.json({ success: true, review });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞' });
    }
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || msg.from.first_name;
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
            await bot.sendVideoNote(chatId, welcomeVideo);
            const welcomeMsg = await bot.sendMessage(chatId, `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n${companyInfo}`, { parse_mode: 'Markdown' });
            lastMessageId[chatId] = welcomeMsg.message_id;
        } else {
            const returnMsg = await bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!`, { parse_mode: 'Markdown' });
            lastMessageId[chatId] = returnMsg.message_id;
        }
        await handleMainMenu(bot, chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ /start:', error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞');
    }
});

const webAppUrl = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME || 'telegram-bot-gmut'}.onrender.com`;

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}" –æ—Ç ${msg.from.username}`);

    if (lastMessageId[chatId] && lastMessageId[chatId] !== msg.message_id) {
        try {
            await bot.deleteMessage(chatId, lastMessageId[chatId]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 400) {
                delete lastMessageId[chatId];
            }
        }
    }

    let newMessage;
    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            await showProfile(bot, chatId);
            break;
        case '–í–∏—Ç—Ä–∏–Ω–∞':
            newMessage = await bot.sendMessage(chatId, '‚úÖ –í –Ω–æ–≤–æ–π –ú–û–î–ï–õ–ò –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´ (–∫–ª—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)\n–≤ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç:\n\n' +
                '- –ø—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ \n' +
                '- –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É:', web_app: { url: `${webAppUrl}/index.html` } }]]
                }
            });
            lastMessageId[chatId] = newMessage.message_id;
            break;
        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            newMessage = await bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
            lastMessageId[chatId] = newMessage.message_id;
            break;
        case '–û—Ç–∑—ã–≤—ã':
            const reviews = await Review.find({ isApproved: true }).populate('productId', 'name');
            if (reviews.length === 0) {
                newMessage = await bot.sendMessage(chatId, 'üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤');
            } else {
                const reviewList = reviews.map(r => {
                    const productName = r.productId ? r.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'; // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ null
                    return `–¢–æ–≤–∞—Ä: ${productName}\n` +
                        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username.startsWith('@') ? r.username : '@' + r.username}\n` +
                        `–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n` +
                        `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}`;
                }).join('\n---\n');
                newMessage = await bot.sendMessage(chatId, `üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:\n\n${reviewList}`, { parse_mode: 'Markdown' });
            }
            lastMessageId[chatId] = newMessage.message_id;
            break;
        case '/admin':
            if (chatId.toString() !== ADMIN_ID) {
                newMessage = await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                lastMessageId[chatId] = newMessage.message_id;
                return;
            }
            await handleAdmin(bot, msg);
            break;
        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            await handleMainMenu(bot, chatId);
            break;
        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            if (chatId.toString() !== ADMIN_ID) return;
            await moderateReviews(bot, chatId);
            break;
        case '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
            if (chatId.toString() !== ADMIN_ID) return;
            await showProducts(bot, chatId);
            break;
        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await addProduct(bot, chatId);
            break;
        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await editProduct(bot, chatId);
            break;
        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await deleteProduct(bot, chatId);
            break;
    }
});

bot.on('callback_query', (callbackQuery) => {
    console.log(`Callback: ${callbackQuery.data}`);
    handleCallback(bot, callbackQuery);
    handleAdminCallback(bot, callbackQuery);
});

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    console.log('Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    const data = JSON.parse(msg.web_app_data.data);
    console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:', data);

    if (data.type === 'review') {
        const { productId, rating, comment } = data;
        console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤:', { productId, rating, comment });
        if (!rating || rating < 1 || rating > 5 || !comment || !productId) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:', { productId, rating, comment });
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞');
            return;
        }
        try {
            const product = await Product.findById(productId);
            if (!product) {
                console.log('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
                await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const username = msg.from.username ? `@${msg.from.username}` : '–ê–Ω–æ–Ω–∏–º';
            const review = new Review({
                userId: chatId.toString(),
                username,
                productId,
                rating,
                comment,
                isApproved: false
            });
            await review.save();
            console.log('–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', review);

            const reviews = await Review.find({ productId, isApproved: true });
            const averageRating = reviews.length > 0
                ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length
                : 0;
            await Product.updateOne({ _id: productId }, { averageRating });

            const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            await bot.sendMessage(ADMIN_ID, message, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` },
                            { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }
                        ]
                    ]
                }
            });

            const newMessage = await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
            lastMessageId[chatId] = newMessage.message_id;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error.stack);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
        }
    }
});

const startServer = async () => {
    await setupWebhook();
    await syncProducts();
    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
};

startServer();