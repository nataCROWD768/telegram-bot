const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const mongoose = require('mongoose');
const axios = require('axios');
const path = require('path');
const { token, welcomeVideo, companyInfo } = require('./config/botConfig');
const { handleMainMenu } = require('./handlers/menuHandler');
const {
    handleAdmin,
    showStats,
    showProducts,
    addProduct,
    editProduct,
    deleteProduct,
    moderateReviews,
    handleAdminCallback
} = require('./handlers/adminHandler');
const { handleCallback, searchProducts } = require('./handlers/productHandler');
const { showProfile } = require('./handlers/profileHandler');
const Visit = require('./models/visit');
const Product = require('./models/product');
const Review = require('./models/review');
require('dotenv').config();

const app = express();
const isLocal = process.env.NODE_ENV !== 'production';
const BOT_TOKEN = process.env.BOT_TOKEN || '7998254262:AAEPpbNdFxiTttY4aLrkdNVzlksBIf6lwd8';
const bot = new TelegramBot(BOT_TOKEN, { polling: isLocal });
const ADMIN_ID = process.env.ADMIN_ID || '942851377';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º lastMessageId –∫–∞–∫ —Å–≤–æ–π—Å—Ç–≤–æ –±–æ—Ç–∞
bot.lastMessageId = {};

// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
const formatDate = (date) => {
    if (!date || isNaN(new Date(date).getTime())) {
        return '–î–∞—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞';
    }
    const months = [
        '—è–Ω–≤–∞—Ä—è', '—Ñ–µ–≤—Ä–∞–ª—è', '–º–∞—Ä—Ç–∞', '–∞–ø—Ä–µ–ª—è', '–º–∞—è', '–∏—é–Ω—è',
        '–∏—é–ª—è', '–∞–≤–≥—É—Å—Ç–∞', '—Å–µ–Ω—Ç—è–±—Ä—è', '–æ–∫—Ç—è–±—Ä—è', '–Ω–æ—è–±—Ä—è', '–¥–µ–∫–∞–±—Ä—è'
    ];
    const d = new Date(date);
    const day = d.getDate();
    const month = months[d.getMonth()];
    const year = d.getFullYear();
    const hours = d.getHours().toString().padStart(2, '0');
    const minutes = d.getMinutes().toString().padStart(2, '0');
    return `${day} ${month} ${year}, ${hours}:${minutes}`;
};

app.use(express.json());
app.use(express.static(path.join(__dirname, 'public'), {
    setHeaders: (res, filePath) => console.log(`–†–∞–∑–¥–∞—á–∞ —Ñ–∞–π–ª–∞: ${filePath}`)
}));

mongoose.connect(process.env.MONGODB_URI)
    .then(() => console.log('MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω'))
    .catch(err => {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err.message);
        process.exit(1);
    });

const setupWebhook = async () => {
    if (isLocal) {
        console.log('–õ–æ–∫–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: polling –∞–∫—Ç–∏–≤–µ–Ω');
        return;
    }
    const appName = process.env.RENDER_APP_NAME || 'telegram-bot-gmut';
    const WEBHOOK_URL = `https://${appName}.onrender.com/bot${BOT_TOKEN}`;
    const telegramApi = `https://api.telegram.org/bot${BOT_TOKEN}`;
    console.log(`–ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook: ${WEBHOOK_URL}`);

    try {
        const deleteResponse = await axios.get(`${telegramApi}/deleteWebhook`);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ Webhook:', deleteResponse.data);

        const setResponse = await axios.get(`${telegramApi}/setWebhook?url=${WEBHOOK_URL}`);
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook:', setResponse.data);
        if (!setResponse.data.ok) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Webhook: ${setResponse.data.description}`);
        }

        const webhookInfo = await axios.get(`${telegramApi}/getWebhookInfo`);
        console.log('–¢–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Webhook:', webhookInfo.data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Webhook:', error.message);
        process.exit(1);
    }
};

// –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞ /api/products
let productCache = null;
let cacheTimestamp = 0;
const CACHE_DURATION = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç

app.get('/api/products', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/products');
    try {
        const now = Date.now();
        if (productCache && now - cacheTimestamp < CACHE_DURATION) {
            console.log('–í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞');
            return res.json(productCache);
        }

        const products = await Product.find();
        if (!products || products.length === 0) {
            console.log('–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
            return res.status(404).json({ error: '–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
        }
        const productsWithReviews = await Promise.all(products.map(async (product) => {
            const reviews = await Review.find({ productId: product._id, isApproved: true });
            console.log(`–û—Ç–∑—ã–≤—ã –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞ ${product.name}:`, reviews);
            const averageRating = reviews.length > 0
                ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length
                : product.averageRating || 0;
            return { ...product.toObject(), reviews, averageRating };
        }));
        console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', productsWithReviews);

        productCache = { products: productsWithReviews, total: products.length };
        cacheTimestamp = now;
        res.json(productCache);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API /api/products:', error.stack);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ file_id
app.get('/api/image/:fileId', async (req, res) => {
    try {
        const fileId = req.params.fileId;
        const file = await bot.getFile(fileId);
        const fileUrl = `https://api.telegram.org/file/bot${BOT_TOKEN}/${file.file_path}`;
        res.redirect(fileUrl);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
        res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' });
    }
});

app.get('/api/reviews', async (req, res) => {
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/reviews');
    try {
        const reviews = await Review.find({ isApproved: true }).populate('productId', 'name');
        console.log('–í—Å–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã:', reviews);
        const formattedReviews = reviews.map(review => ({
            ...review.toObject(),
            productName: review.productId ? review.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'
        }));
        res.json({ reviews: formattedReviews, total: formattedReviews.length });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ API /api/reviews:', error.stack);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–∑—ã–≤–æ–≤' });
    }
});

app.post('/api/reviews', async (req, res) => {
    try {
        const { productId, username, rating, comment, isApproved } = req.body;
        if (!productId || !mongoose.Types.ObjectId.isValid(productId)) {
            return res.status(400).json({ success: false, error: '–ù–µ–≤–µ—Ä–Ω—ã–π productId' });
        }
        const review = new Review({
            userId: 'web_user_' + Date.now(),
            username: username || '–ê–Ω–æ–Ω–∏–º',
            productId,
            rating,
            comment,
            isApproved: isApproved || false
        });
        await review.save();
        console.log('–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:', review);

        const product = await Product.findById(productId);
        const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product ? product.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä'}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username || '–ê–Ω–æ–Ω–∏–º'}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
        await bot.sendMessage(ADMIN_ID, message, {
            reply_markup: {
                inline_keyboard: [
                    [
                        { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` },
                        { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }
                    ]
                ]
            }
        });

        res.json({ success: true, review });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error);
        res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞' });
    }
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const username = msg.from.username || msg.from.first_name;
    try {
        const existingVisit = await Visit.findOne({ userId: chatId });
        if (!existingVisit) {
            await Visit.create({ username, userId: chatId });
            await bot.sendVideoNote(chatId, welcomeVideo);
            const welcomeMsg = await bot.sendMessage(chatId, `‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n${companyInfo}`, { parse_mode: 'Markdown' });
            bot.lastMessageId[chatId] = welcomeMsg.message_id;
        } else {
            const returnMsg = await bot.sendMessage(chatId, `üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, ${username}!`, { parse_mode: 'Markdown' });
            bot.lastMessageId[chatId] = returnMsg.message_id;
        }
        await handleMainMenu(bot, chatId);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ /start:', error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞');
    }
});

const webAppUrl = isLocal ? 'http://localhost:3000' : `https://${process.env.RENDER_APP_NAME || 'telegram-bot-gmut'}.onrender.com`;

bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ: "${msg.text}" –æ—Ç ${msg.from.username}`);

    if (bot.lastMessageId[chatId] && bot.lastMessageId[chatId] !== msg.message_id) {
        try {
            await bot.deleteMessage(chatId, bot.lastMessageId[chatId]);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 400) {
                delete bot.lastMessageId[chatId];
            }
        }
    }

    let newMessage;
    switch (msg.text) {
        case '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç':
            await showProfile(bot, chatId);
            break;
        case '–í–∏—Ç—Ä–∏–Ω–∞':
            newMessage = await bot.sendMessage(chatId, '‚úÖ –í –Ω–æ–≤–æ–π –ú–û–î–ï–õ–ò –ü–ê–†–¢–ù–ï–†–°–ö–û–ô –ü–†–û–ì–†–ê–ú–ú–´ (–∫–ª—É–±–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)\n–≤ –∫–æ–Ω–µ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –≤—Ö–æ–¥–∏—Ç:\n\n' +
                '- –ø—Ä–∏–±—ã–ª—å –∫–æ–º–ø–∞–Ω–∏–∏ \n' +
                '- –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤–æ–µ –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ', {
                reply_markup: {
                    inline_keyboard: [[{ text: 'üõí –û—Ç–∫—Ä—ã—Ç—å –≤–∏—Ç—Ä–∏–Ω—É:', web_app: { url: `${webAppUrl}/index.html` } }]]
                }
            });
            bot.lastMessageId[chatId] = newMessage.message_id;
            break;
        case '–ë–æ–Ω—É—Å—ã –∏ –ø—Ä–æ–¥—É–∫—Ç':
            newMessage = await bot.sendMessage(chatId, '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–∞—Ö (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
            bot.lastMessageId[chatId] = newMessage.message_id;
            break;
        case '–û—Ç–∑—ã–≤—ã':
            const reviewsPerPage = 10;
            const reviews = await Review.find({ isApproved: true })
                .populate('productId', 'name')
                .sort({ createdAt: -1 });
            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è Telegram:', reviews);

            if (reviews.length === 0) {
                newMessage = await bot.sendMessage(chatId, 'üìù –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö –æ—Ç–∑—ã–≤–æ–≤');
                bot.lastMessageId[chatId] = newMessage.message_id;
            } else {
                const totalPages = Math.ceil(reviews.length / reviewsPerPage);

                const showReviewsPage = async (page = 1) => {
                    const start = (page - 1) * reviewsPerPage;
                    const end = Math.min(start + reviewsPerPage, reviews.length);
                    const paginatedReviews = reviews.slice(start, end);

                    const reviewList = paginatedReviews.map(r => {
                        const productName = r.productId ? r.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
                        return `–î–∞—Ç–∞: ${formatDate(r.createdAt)}\n` +
                            `–¢–æ–≤–∞—Ä: ${productName}\n` +
                            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username.startsWith('@') ? r.username : '@' + r.username}\n` +
                            `–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n` +
                            `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}`;
                    }).join('\n---\n');

                    const inlineKeyboard = [];
                    if (totalPages > 1) {
                        const navigationButtons = [];
                        if (page > 1) {
                            navigationButtons.push({ text: '‚¨ÖÔ∏è', callback_data: `reviews_page_${page - 1}` });
                        }
                        navigationButtons.push({ text: `${page}/${totalPages}`, callback_data: 'noop' });
                        if (page < totalPages) {
                            navigationButtons.push({ text: '‚û°Ô∏è', callback_data: `reviews_page_${page + 1}` });
                        }
                        inlineKeyboard.push(navigationButtons);
                    }

                    newMessage = await bot.sendMessage(chatId, `üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (${start + 1}-${end} –∏–∑ ${reviews.length}):\n\n${reviewList}`, {
                        parse_mode: 'Markdown',
                        reply_markup: { inline_keyboard: inlineKeyboard }
                    });
                    bot.lastMessageId[chatId] = newMessage.message_id;
                };

                await showReviewsPage(1);
            }
            break;
        case '/admin':
            if (chatId.toString() !== ADMIN_ID) {
                newMessage = await bot.sendMessage(chatId, '‚ùå –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
                bot.lastMessageId[chatId] = newMessage.message_id;
                return;
            }
            await handleAdmin(bot, msg);
            break;
        case '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é':
            await handleMainMenu(bot, chatId);
            break;
        case '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤':
            if (chatId.toString() !== ADMIN_ID) return;
            await moderateReviews(bot, chatId);
            break;
        case '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã':
            if (chatId.toString() !== ADMIN_ID) return;
            await showProducts(bot, chatId);
            break;
        case '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await addProduct(bot, chatId);
            break;
        case '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await editProduct(bot, chatId);
            break;
        case '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä':
            if (chatId.toString() !== ADMIN_ID) return;
            await deleteProduct(bot, chatId);
            break;
    }
});

bot.onText(/\/search (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    await searchProducts(bot, chatId, query);
});

bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    if (data.startsWith('reviews_page_')) {
        const page = parseInt(data.split('_')[2]);
        const reviewsPerPage = 10;
        const reviews = await Review.find({ isApproved: true })
            .populate('productId', 'name')
            .sort({ createdAt: -1 });
        const totalPages = Math.ceil(reviews.length / reviewsPerPage);

        const start = (page - 1) * reviewsPerPage;
        const end = Math.min(start + reviewsPerPage, reviews.length);
        const paginatedReviews = reviews.slice(start, end);

        const reviewList = paginatedReviews.map(r => {
            const productName = r.productId ? r.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            return `–î–∞—Ç–∞: ${formatDate(r.createdAt)}\n` +
                `–¢–æ–≤–∞—Ä: ${productName}\n` +
                `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${r.username.startsWith('@') ? r.username : '@' + r.username}\n` +
                `–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(r.rating)}${'‚òÜ'.repeat(5 - r.rating)}\n` +
                `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${r.comment}`;
        }).join('\n---\n');

        const inlineKeyboard = [];
        if (totalPages > 1) {
            const navigationButtons = [];
            if (page > 1) {
                navigationButtons.push({ text: '‚¨ÖÔ∏è', callback_data: `reviews_page_${page - 1}` });
            }
            navigationButtons.push({ text: `${page}/${totalPages}`, callback_data: 'noop' });
            if (page < totalPages) {
                navigationButtons.push({ text: '‚û°Ô∏è', callback_data: `reviews_page_${page + 1}` });
            }
            inlineKeyboard.push(navigationButtons);
        }

        await bot.editMessageText(`üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ –æ—Ç–∑—ã–≤—ã (${start + 1}-${end} –∏–∑ ${reviews.length}):\n\n${reviewList}`, {
            chat_id: chatId,
            message_id: callbackQuery.message.message_id,
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: inlineKeyboard }
        });

        bot.answerCallbackQuery(callbackQuery.id);
    } else if (data === 'noop') {
        bot.answerCallbackQuery(callbackQuery.id);
    } else {
        console.log(`Callback: ${callbackQuery.data}`);
        handleCallback(bot, callbackQuery);
        handleAdminCallback(bot, callbackQuery);
    }
});

app.post(`/bot${BOT_TOKEN}`, (req, res) => {
    console.log('Webhook –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(req.body, null, 2));
    bot.processUpdate(req.body);
    res.sendStatus(200);
});

bot.on('web_app_data', async (msg) => {
    const chatId = msg.chat.id;
    console.log('=== –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data ===');
    console.log('–ß–∞—Ç ID:', chatId);
    console.log('–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram:', JSON.stringify(msg, null, 2));
    console.log('–°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App:', msg.web_app_data.data);

    let data;
    try {
        data = JSON.parse(msg.web_app_data.data);
        console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
        return;
    }

    if (data.type === 'share') {
        const { productId, name, clubPrice, clientPrice, description, image } = data;
        console.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —à–∞—Ä–∏–Ω–≥–∞ –ø—Ä–æ–¥—É–∫—Ç–∞:', { productId, name, clubPrice, clientPrice, description, image });

        try {
            const product = await Product.findById(productId);
            if (!product) {
                console.log('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ:', productId);
                await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç–∞
            const caption = `
‚ú® *${name}* ‚ú®
üíé *–ö–ª—É–±–Ω–∞—è —Ü–µ–Ω–∞:* ${clubPrice.toLocaleString()} ‚ÇΩ
üí∞ *–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ü–µ–Ω–∞:* ${clientPrice.toLocaleString()} ‚ÇΩ
üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}
            `.trim();

            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –≤ —á–∞—Ç:', { chatId, image, caption });
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
            const newMessage = await bot.sendPhoto(chatId, image, {
                caption,
                parse_mode: 'Markdown'
            });
            bot.lastMessageId[chatId] = newMessage.message_id;
            console.log('–ö–∞—Ä—Ç–æ—á–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, message_id:', newMessage.message_id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–∞:', error.message);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —à–∞—Ä–∏–Ω–≥–µ –ø—Ä–æ–¥—É–∫—Ç–∞');
        }
    } else if (data.type === 'review') {
        const { productId, rating, comment } = data;
        console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤:', { productId, rating, comment });
        if (!rating || rating < 1 || rating > 5 || !comment || !productId || !mongoose.Types.ObjectId.isValid(productId)) {
            console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–∞:', { productId, rating, comment });
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–∑—ã–≤–∞');
            return;
        }
        try {
            const product = await Product.findById(productId);
            if (!product) {
                console.log('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω:', productId);
                await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }
            const username = msg.from.username ? `@${msg.from.username}` : '–ê–Ω–æ–Ω–∏–º';
            const review = new Review({
                userId: chatId.toString(),
                username,
                productId,
                rating,
                comment,
                isApproved: false
            });
            await review.save();
            console.log('–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', review);

            const reviews = await Review.find({ productId, isApproved: true });
            const averageRating = reviews.length > 0
                ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length
                : 0;
            await Product.updateOne({ _id: productId }, { averageRating });

            const message = `–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:\n–¢–æ–≤–∞—Ä: ${product.name}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${username}\n–†–µ–π—Ç–∏–Ω–≥: ${rating}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${comment}`;
            await bot.sendMessage(ADMIN_ID, message, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` },
                            { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }
                        ]
                    ]
                }
            });

            const newMessage = await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
            bot.lastMessageId[chatId] = newMessage.message_id;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞:', error.stack);
            await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞');
        }
    } else {
        console.log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö:', data.type);
    }
    console.log('=== –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ web_app_data ===');
});

const startServer = async () => {
    await setupWebhook();
    app.get('/', (req, res) => res.sendFile(path.join(__dirname, 'public', 'index.html')));
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
};

startServer();