const TelegramBot = require('node-telegram-bot-api');
const Review = require('../models/review');
const Product = require('../models/product');

const ADMIN_ID = process.env.ADMIN_ID || 'YOUR_ADMIN_ID_HERE';

function handleAdmin(bot, msg) {
  const chatId = msg.chat.id;
  if (chatId.toString() !== ADMIN_ID) return;

  bot.sendMessage(chatId, 'üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
    reply_markup: {
      keyboard: [
        ['–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤'],
        ['–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä'],
        ['–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä', '–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤'],
        ['–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
}

async function moderateReviews(bot, chatId) {
  const reviews = await Review.find({ isApproved: false }).populate('productId', 'name');
  if (reviews.length === 0) {
    await bot.sendMessage(chatId, '–ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏');
    return;
  }

  reviews.forEach(async (review, index) => {
    const message = `
            –û—Ç–∑—ã–≤ #${index + 1}
            –¢–æ–≤–∞—Ä: ${review.productId.name}
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${review.username}
            –†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5 - review.rating)}
            –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}
        `;
    await bot.sendMessage(chatId, message, {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '–£—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: `approve_review_${review._id}` },
            { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }
          ]
        ]
      }
    });
  });
}

async function handleAdminCallback(bot, callbackQuery) {
  const chatId = callbackQuery.message.chat.id;
  const data = callbackQuery.data;

  if (chatId.toString() !== ADMIN_ID) return;

  if (data.startsWith('approve_review_')) {
    const reviewId = data.split('_')[2];
    const review = await Review.findById(reviewId);
    if (review) {
      review.isApproved = true;
      await review.save();
      await bot.editMessageText(`${callbackQuery.message.text}\n\n‚úÖ –£—Ç–≤–µ—Ä–∂–¥—ë–Ω`, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id
      });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—Ç–∑—ã–≤ —É—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
    }
  } else if (data.startsWith('reject_review_')) {
    const reviewId = data.split('_')[2];
    const review = await Review.findByIdAndDelete(reviewId);
    if (review) {
      await bot.editMessageText(`${callbackQuery.message.text}\n\n‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω`, {
        chat_id: chatId,
        message_id: callbackQuery.message.message_id
      });
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω' });
    }
  }
}

async function showStats(bot, chatId) {
  bot.sendMessage(chatId, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

async function showProducts(bot, chatId) {
  const products = await Product.find();
  if (products.length === 0) {
    await bot.sendMessage(chatId, '–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç');
  } else {
    const productList = products.map(p => `${p.name} - ${p.clubPrice} —Ä—É–±.`).join('\n');
    await bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n${productList}`);
  }
}

async function addProduct(bot, chatId) {
  bot.sendMessage(chatId, '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

async function editProduct(bot, chatId) {
  bot.sendMessage(chatId, '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

async function deleteProduct(bot, chatId) {
  bot.sendMessage(chatId, '–£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)');
}

module.exports = {
  handleAdmin,
  showStats,
  showProducts,
  addProduct,
  editProduct,
  deleteProduct,
  moderateReviews,
  handleAdminCallback
};