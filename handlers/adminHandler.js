const Product = require('../models/product');

const handleAdmin = async (bot, msg) => {
  const chatId = msg.chat.id;
  await bot.sendMessage(chatId, 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
    reply_markup: {
      keyboard: [
        ['–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'],
        ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'],
        ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
};

const showStats = async (bot, chatId) => {
  // –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
};

const showProducts = async (bot, chatId) => {
  try {
    const products = await Product.find();
    if (products.length === 0) {
      await bot.sendMessage(chatId, 'üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');
      return;
    }
    const productList = products.map(p =>
        `ID: ${p._id}\n` +
        `–ù–∞–∑–≤–∞–Ω–∏–µ: ${p.name}\n` +
        `–û–ø–∏—Å–∞–Ω–∏–µ: ${p.description}\n` +
        `–¶–µ–Ω–∞ (–∫–ª—É–±): ${p.clubPrice} ‚ÇΩ\n` +
        `–¶–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç): ${p.clientPrice} ‚ÇΩ\n` +
        `–†–µ–π—Ç–∏–Ω–≥: ${p.averageRating}\n` +
        `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${p.image}\n`
    ).join('\n---\n');
    await bot.sendMessage(chatId, `üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:\n\n${productList}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤:', error);
    await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
  }
};

const addProduct = async (bot, chatId) => {
  await bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞ (–∫–ª—É–±)|–¶–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç)|URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è`', { parse_mode: 'Markdown' });
  bot.once('message', async (msg) => {
    const [name, description, clubPrice, clientPrice, image] = msg.text.split('|');
    if (!name || !description || !clubPrice || !clientPrice || !image) {
      await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      return;
    }
    try {
      const product = new Product({
        name,
        description,
        clubPrice: parseInt(clubPrice),
        clientPrice: parseInt(clientPrice),
        image,
        stock: 0, // –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è stock –Ω–µ –≤–∞–∂–µ–Ω
        averageRating: 0
      });
      await product.save();
      await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  });
};

const editProduct = async (bot, chatId) => {
  await bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  bot.once('message', async (msg) => {
    const productId = msg.text;
    const product = await Product.findById(productId);
    if (!product) {
      await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    await bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n${product.name}|${product.description}|${product.clubPrice}|${product.clientPrice}|${product.image}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞ (–∫–ª—É–±)|–¶–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç)|URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\``);
    bot.once('message', async (msg) => {
      const [name, description, clubPrice, clientPrice, image] = msg.text.split('|');
      if (!name || !description || !clubPrice || !clientPrice || !image) {
        await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        return;
      }
      try {
        await Product.updateOne({ _id: productId }, {
          name,
          description,
          clubPrice: parseInt(clubPrice),
          clientPrice: parseInt(clientPrice),
          image
        });
        await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
      }
    });
  });
};

const deleteProduct = async (bot, chatId) => {
  await bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
  bot.once('message', async (msg) => {
    const productId = msg.text;
    const product = await Product.findById(productId);
    if (!product) {
      await bot.sendMessage(chatId, '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return;
    }
    try {
      await Product.deleteOne({ _id: productId });
      await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${product.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞');
    }
  });
};

const moderateReviews = async (bot, chatId) => {
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –æ—Ç–∑—ã–≤–æ–≤
};

const handleAdminCallback = async (bot, callbackQuery) => {
  // –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω–∞
};

module.exports = {
  handleAdmin,
  showStats,
  showProducts,
  addProduct,
  editProduct,
  deleteProduct,
  moderateReviews,
  handleAdminCallback
};