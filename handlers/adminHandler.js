const Product = require('../models/product');
const Review = require('../models/review');
const ExcelJS = require('exceljs');
const fs = require('fs').promises;
const path = require('path');
const { formatDate } = require('../utils'); // –ò–º–ø–æ—Ä—Ç –∏–∑ utils.js

const STORAGE_CHAT_ID = '-2304626004';

const handleAdmin = async (bot, msg) => {
    const chatId = msg.chat.id;
    await bot.sendMessage(chatId, 'üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', {
        reply_markup: {
            keyboard: [['–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã', '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'], ['–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä', '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä'], ['–ú–æ–¥–µ—Ä–∞—Ü–∏—è –æ—Ç–∑—ã–≤–æ–≤', '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é']],
            resize_keyboard: true
        }
    });
};

const showProducts = async (bot, chatId) => {
    try {
        const products = await Product.find();
        if (!products.length) return await bot.sendMessage(chatId, 'üì¶ –¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç');

        const workbook = new ExcelJS.Workbook();
        const worksheet = workbook.addWorksheet('–¢–æ–≤–∞—Ä—ã');
        worksheet.columns = [
            { header: 'ID', key: '_id', width: 25 },
            { header: '–ù–∞–∑–≤–∞–Ω–∏–µ', key: 'name', width: 30 },
            { header: '–û–ø–∏—Å–∞–Ω–∏–µ', key: 'description', width: 40 },
            { header: '–¶–µ–Ω–∞ (–∫–ª—É–±)', key: 'clubPrice', width: 15 },
            { header: '–¶–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç)', key: 'clientPrice', width: 15 },
            { header: '–†–µ–π—Ç–∏–Ω–≥', key: 'averageRating', width: 10 },
            { header: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (file_id)', key: 'image', width: 40 }
        ];

        worksheet.getRow(1).font = { bold: true, size: 12, color: { argb: 'FFFFFFFF' } };
        worksheet.getRow(1).fill = { type: 'pattern', pattern: 'solid', fgColor: { argb: 'FF0088CC' } };
        worksheet.getRow(1).alignment = { vertical: 'middle', horizontal: 'center' };

        products.forEach(product => worksheet.addRow(product.toObject()));
        worksheet.eachRow((row, rowNumber) => {
            if (rowNumber > 1) {
                row.eachCell(cell => {
                    cell.border = { top: { style: 'thin' }, left: { style: 'thin' }, bottom: { style: 'thin' }, right: { style: 'thin' } };
                    cell.alignment = { vertical: 'middle', horizontal: 'left' };
                });
            }
        });

        const filePath = path.join(__dirname, '../products.xlsx');
        await workbook.xlsx.writeFile(filePath);
        await bot.sendDocument(chatId, filePath, { caption: '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤' }, { filename: '–¢–æ–≤–∞—Ä—ã.xlsx', contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
        await fs.unlink(filePath);
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤');
    }
};

const collectInput = (bot, chatId, prompt) => new Promise((resolve) => {
    bot.sendMessage(chatId, prompt);
    bot.once('message', (msg) => resolve(msg.text));
});

const addProduct = async (bot, chatId) => {
    try {
        const productData = {};
        productData.name = await collectInput(bot, chatId, 'üì¶ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞. –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
        productData.description = await collectInput(bot, chatId, '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:');
        productData.clubPrice = parseInt(await collectInput(bot, chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∫–ª—É–±), —Ä—É–±.:'));
        if (isNaN(productData.clubPrice)) throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (–∫–ª—É–±)');
        productData.clientPrice = parseInt(await collectInput(bot, chatId, '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É (–∫–ª–∏–µ–Ω—Ç), —Ä—É–±.:'));
        if (isNaN(productData.clientPrice)) throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç)');

        await bot.sendMessage(chatId, '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:');
        const photoMsg = await new Promise((resolve) => bot.once('message', resolve));
        if (!photoMsg.photo) throw new Error('–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è');
        const fileId = photoMsg.photo[photoMsg.photo.length - 1].file_id;

        await bot.sendPhoto(STORAGE_CHAT_ID, fileId, { caption: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${productData.name}` });
        productData.image = fileId;

        const product = new Product({ ...productData, stock: 0, averageRating: 0 });
        await product.save();
        await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${productData.name}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!`);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
};

const editProduct = async (bot, chatId) => {
    try {
        const productId = await collectInput(bot, chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        const product = await Product.findById(productId);
        if (!product) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');

        const currentData = `${product.name}|${product.description}|${product.clubPrice}|${product.clientPrice}|${product.image}`;
        const newData = await collectInput(bot, chatId, `–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n${currentData}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\`–ù–∞–∑–≤–∞–Ω–∏–µ|–û–ø–∏—Å–∞–Ω–∏–µ|–¶–µ–Ω–∞ (–∫–ª—É–±)|–¶–µ–Ω–∞ (–∫–ª–∏–µ–Ω—Ç)|file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\``);
        const [name, description, clubPrice, clientPrice, image] = newData.split('|');
        if (!name || !description || !clubPrice || !clientPrice || !image) throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç');

        if (image !== product.image) await bot.sendPhoto(STORAGE_CHAT_ID, image, { caption: `–ù–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: ${name}` });
        await Product.updateOne({ _id: productId }, { name, description, clubPrice: parseInt(clubPrice), clientPrice: parseInt(clientPrice), image });
        await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${name}" —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω!`);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
};

const deleteProduct = async (bot, chatId) => {
    try {
        const productId = await collectInput(bot, chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:');
        const product = await Product.findById(productId);
        if (!product) throw new Error('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');

        await Product.deleteOne({ _id: productId });
        await bot.sendMessage(chatId, `‚úÖ –¢–æ–≤–∞—Ä "${product.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω!`);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }
};

const moderateReviews = async (bot, chatId) => {
    try {
        const reviews = await Review.find({ isApproved: false }).populate('productId', 'name');
        if (!reviews.length) return await bot.sendMessage(chatId, 'üìù –ù–µ—Ç –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é');

        for (const review of reviews) {
            const productName = review.productId ? review.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            const reviewText = `–î–∞—Ç–∞: ${formatDate(review.createdAt)}\n–¢–æ–≤–∞—Ä: ${productName}\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${review.username.startsWith('@') ? review.username : '@' + review.username}\n–†–µ–π—Ç–∏–Ω–≥: ${'‚òÖ'.repeat(review.rating)}${'‚òÜ'.repeat(5 - review.rating)}\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}`;
            await bot.sendMessage(chatId, reviewText, {
                reply_markup: { inline_keyboard: [[{ text: '–û–¥–æ–±—Ä–∏—Ç—å', callback_data: `approve_review_${review._id}` }, { text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `reject_review_${review._id}` }]] }
            });
        }
    } catch (error) {
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤');
    }
};

const handleAdminCallback = async (bot, callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const data = callbackQuery.data;

    try {
        if (data.startsWith('approve_review_')) {
            const reviewId = data.split('_')[2];
            const review = await Review.findByIdAndUpdate(reviewId, { isApproved: true }, { new: true }).populate('productId', 'name');
            if (!review) throw new Error('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            const productName = review.productId ? review.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            if (review.productId) {
                const reviews = await Review.find({ productId: review.productId, isApproved: true });
                const averageRating = reviews.length ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length : 0;
                await Product.updateOne({ _id: review.productId }, { averageRating });
            }
            await bot.editMessageText(`–û—Ç–∑—ã–≤ –æ–¥–æ–±—Ä–µ–Ω!\n–¢–æ–≤–∞—Ä: ${productName}`, { chat_id: chatId, message_id: callbackQuery.message.message_id });
        } else if (data.startsWith('reject_review_')) {
            const reviewId = data.split('_')[2];
            const review = await Review.findById(reviewId).populate('productId', 'name');
            if (!review) throw new Error('–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            const productName = review.productId ? review.productId.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä';
            await Review.deleteOne({ _id: reviewId });
            if (review.productId) {
                const reviews = await Review.find({ productId: review.productId, isApproved: true });
                const averageRating = reviews.length ? reviews.reduce((sum, r) => sum + r.rating, 0) / reviews.length : 0;
                await Product.updateOne({ _id: review.productId }, { averageRating });
            }
            await bot.editMessageText(`–û—Ç–∑—ã–≤ –æ—Ç–∫–ª–æ–Ω—ë–Ω –∏ —É–¥–∞–ª—ë–Ω!\n–¢–æ–≤–∞—Ä: ${productName}`, { chat_id: chatId, message_id: callbackQuery.message.message_id });
        }
        bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
        await bot.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        bot.answerCallbackQuery(callbackQuery.id);
    }
};

module.exports = { handleAdmin, showProducts, addProduct, editProduct, deleteProduct, moderateReviews, handleAdminCallback };