const Product           = require('../models/product');
const Order             = require('../models/order');
const Review            = require('../models/review');

module.exports = {
  showProducts: async (bot, chatId) => {
    const webAppUrl = `https://${process.env.RENDER_APP_NAME}.onrender.com/`;
    await bot.sendMessage(chatId, 'üõí –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏—Ç—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–æ–≤...', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≤–∏—Ç—Ä–∏–Ω—É', web_app: { url: webAppUrl } }]
        ]
      }
    });
  },

  showCategories: async (bot, chatId) => {
    // –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  },

  handleCallback: async (bot, callbackQuery) => {
    const chatId    = callbackQuery.message.chat.id;
    const data      = callbackQuery.data;

    if (data.startsWith('order_')) {
      const productId = data.split('_')[1];
      await bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 2'
        }
      });
      bot.once('message', async (msg) => {
        const quantity  = parseInt(msg.text);
        const product   = await Product.findById(productId);

        if (isNaN(quantity) || quantity <= 0) {
          await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
          return;
        }

        const order = await Order.create({
          userId:     chatId,
          username:   msg.from.username,
          productId,
          quantity,
          totalPrice: quantity * product.clubPrice
        });

        product.stock -= quantity;
        await product.save();

        await bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°—É–º–º–∞: ${order.totalPrice} —Ä—É–±.`);
      });
    }

    if (data.startsWith('review_')) {
      const productId = data.split('_')[1];
      await bot.sendMessage(chatId, 'üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ä–µ–π—Ç–∏–Ω–≥(1-5);–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', {
        reply_markup: { force_reply: true }
      });

      bot.once('message', async (msg) => {
        const [rating, comment] = msg.text.split(';');
        const numRating         = parseInt(rating);

        if (isNaN(numRating) || numRating < 1 || numRating > 5) {
          await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞');
          return;
        }

        await Review.create({
          userId:     chatId,
          username:   msg.from.username,
          productId,
          rating:     numRating,
          comment
        });

        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
      });
    }
  },

  searchProducts: async (bot, chatId, query) => {
    // –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –∏–ª–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ Web App
  }
};