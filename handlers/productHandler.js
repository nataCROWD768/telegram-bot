const Product           = require('../models/product');
const Order             = require('../models/order');
const Review            = require('../models/review');
const sharp             = require('sharp');
const fs                = require('fs');
const path              = require('path');

// –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä
const THUMBNAIL_DIR     = path.join(__dirname, '../public/thumbnails');
if (!fs.existsSync(THUMBNAIL_DIR)) {
  fs.mkdirSync(THUMBNAIL_DIR, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
const createThumbnail = async (imagePath) => {
  const thumbnailPath = path.join(THUMBNAIL_DIR, `thumb_${path.basename(imagePath)}`);

  // –ï—Å–ª–∏ –º–∏–Ω–∏–∞—Ç—é—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
  if (fs.existsSync(thumbnailPath)) {
    return thumbnailPath;
  }

  try {
    await sharp(imagePath)
        .resize(200, 200, { fit: 'cover' }) // –°–∂–∏–º–∞–µ–º –¥–æ 200x200
        .jpeg({ quality: 80 }) // –£–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–∞–∑–º–µ—Ä–∞
        .toFile(thumbnailPath);
    return thumbnailPath;
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–Ω–∏–∞—Ç—é—Ä—ã –¥–ª—è ${imagePath}:`, error.message);
    return imagePath; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
  }
};

module.exports = {
  showProducts: async (bot, chatId, category = null) => {
    try {
      const query     = category ? { category } : {};
      const products  = await Product.find(query);

      if (products.length === 0) {
        await bot.sendMessage(chatId, 'üõí –¢–æ–≤–∞—Ä—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å –º–∏–Ω–∏–∞—Ç—é—Ä–∞–º–∏
      for (const product of products) {
        const thumbnail = await createThumbnail(product.image);
        const caption = `
                    *${product.name}*
                    –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è: ${product.clientPrice} —Ä—É–±.
                    –ö–ª—É–±–Ω–∞—è: ${product.clubPrice} —Ä—É–±.
                `;

        await bot.sendPhoto(chatId, thumbnail, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `product_${product._id}` }]
            ]
          }
        });
      }

      // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      await bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä:', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'categories' }]]
        }
      });
    } catch (error) {
      console.error(error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∏—Ç—Ä–∏–Ω—ã');
    }
  },

  showCategories: async (bot, chatId) => {
    try {
      const categories = await Product.distinct('category');
      const keyboard   = [
        ...categories.map(cat => [{ text: cat, callback_data: `cat_${cat}` }]),
        [{ text: '–í—Å–µ —Ç–æ–≤–∞—Ä—ã', callback_data: 'all_products' }]
      ];

      await bot.sendMessage(chatId, 'üìã –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', {
        reply_markup: {
          inline_keyboard: keyboard
        }
      });
    } catch (error) {
      console.error(error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π');
    }
  },

  handleCallback: async (bot, callbackQuery) => {
    const chatId    = callbackQuery.message.chat.id;
    const data      = callbackQuery.data;

    if (data.startsWith('product_')) {
      const productId = data.split('_')[1];
      const product   = await Product.findById(productId);
      const reviews   = await Review.find({ productId, isApproved: true }).limit(3);

      let reviewsText = '\n*–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:*\n';
      reviews.forEach(r => {
        reviewsText += `@${r.username}: ${r.rating}/5 - ${r.comment}\n`;
      });

      const caption = `
                *${product.name}* (${product.category})
                
                ${product.description}
                
                –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Ü–µ–Ω–∞: ${product.clientPrice} —Ä—É–±.
                –ö–ª—É–±–Ω–∞—è —Ü–µ–Ω–∞: ${product.clubPrice} —Ä—É–±.
                –†–µ–π—Ç–∏–Ω–≥: ‚òÖ ${product.averageRating.toFixed(1)}
                ${reviews.length > 0 ? reviewsText : '–û—Ç–∑—ã–≤–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç'}
            `;

      await bot.sendPhoto(chatId, product.image, { // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
        caption,
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [{ text: `–ó–∞–∫–∞–∑–∞—Ç—å (${product.clubPrice} —Ä—É–±.)`, callback_data: `order_${product._id}` }],
            [{ text: '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', callback_data: `review_${product._id}` }],
            [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_products' }]
          ]
        }
      });
    }

    if (data.startsWith('order_')) {
      const productId = data.split('_')[1];
      await bot.sendMessage(chatId, 'üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:', {
        reply_markup: {
          force_reply: true,
          input_field_placeholder: '–ù–∞–ø—Ä–∏–º–µ—Ä: 2'
        }
      });
      bot.once('message', async (msg) => {
        const quantity  = parseInt(msg.text);
        const product   = await Product.findById(productId);

        if (isNaN(quantity) || quantity <= 0) {
          await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ');
          return;
        }

        const order = await Order.create({
          userId:     chatId,
          username:   msg.from.username,
          productId,
          quantity,
          totalPrice: quantity * product.clubPrice
        });

        product.stock -= quantity;
        await product.save();

        await bot.sendMessage(chatId, `‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –°—É–º–º–∞: ${order.totalPrice} —Ä—É–±.`);
      });
    }

    if (data.startsWith('review_')) {
      const productId = data.split('_')[1];
      await bot.sendMessage(chatId, 'üìù –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Ä–µ–π—Ç–∏–Ω–≥(1-5);–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', {
        reply_markup: { force_reply: true }
      });

      bot.once('message', async (msg) => {
        const [rating, comment] = msg.text.split(';');
        const numRating         = parseInt(rating);

        if (isNaN(numRating) || numRating < 1 || numRating > 5) {
          await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞');
          return;
        }

        await Review.create({
          userId:     chatId,
          username:   msg.from.username,
          productId,
          rating:     numRating,
          comment
        });

        await bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –û–Ω –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.');
      });
    }

    if (data === 'categories') module.exports.showCategories(bot, chatId);
    if (data.startsWith('cat_')) module.exports.showProducts(bot, chatId, data.split('_')[1]);
    if (data === 'all_products') module.exports.showProducts(bot, chatId);
    if (data === 'back_to_products') module.exports.showProducts(bot, chatId);
  },

  searchProducts: async (bot, chatId, query) => {
    try {
      const products = await Product.find({
        $or: [
          { name: { $regex: query, $options: 'i' } },
          { description: { $regex: query, $options: 'i' } }
        ]
      });

      if (products.length === 0) {
        await bot.sendMessage(chatId, 'üîç –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      for (const product of products) {
        const thumbnail = await createThumbnail(product.image);
        const caption = `
                    *${product.name}*
                    –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è: ${product.clientPrice} —Ä—É–±.
                    –ö–ª—É–±–Ω–∞—è: ${product.clubPrice} —Ä—É–±.
                `;

        await bot.sendPhoto(chatId, thumbnail, {
          caption,
          parse_mode: 'Markdown',
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', callback_data: `product_${product._id}` }]
            ]
          }
        });
      }

      await bot.sendMessage(chatId, 'üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', {
        reply_markup: {
          inline_keyboard: [[{ text: 'üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏', callback_data: 'categories' }]]
        }
      });
    } catch (error) {
      console.error(error);
      await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ');
    }
  }
};